import "nanopb.proto";
//import "rpc-options.proto";
package barobo.Robot;

//option (version).major = 0;
//option (version).minor = 0;
//option (version).patch = 0;

/* The three basic types of interface component are attributes, methods, and
 * broadcasts. Each component is defined by a unique message. Each component
 * will thus have a unique type when compiled into C/C++, which enables us to
 * use the messages as arguments to an overloaded handler function. By using an
 * overloaded function accepting a reference to one of these generated
 * structures, we eliminate a significant amount of boilerplate that would
 * otherwise have to be maintained in the implementation of an object with this
 * interface. */

//////////////////////////////////////////////////////////////////////////////
// Methods

/* Motor controllers:
 * - smooth acceleration
 * - constant velocity (no goal)
 * - constant velocity (to an absolute goal)
 * - constant velocity (to a relative goal)
 * - PID (to an absolute goal)
 * - PID (to a relative goal)
 */

message getAccelerometerData {
    message In {}
    message Result {
        required float x = 1;
        required float y = 2;
        required float z = 3;
    }
}

message getLedColor {
    message In {}
    message Result {
        required uint32 value = 1;
    }
}

message setLedColor {
    message In {
        required uint32 value = 1;
    }
    message Result {}
}

message getBuzzerFrequency {
    message In {}
    message Result {
        required float value = 1;
    }
}

message setBuzzerFrequency {
    message In {
        required float value = 1;
    }
    message Result {}
}

message enableButtonEvent {
    message In{
        required bool enable = 1;
    }
    message Result {}
}

message enableEncoderEvent {
    message In{
        message SignalState{
            required bool enable = 1;
            required float granularity = 2;
        }

        optional SignalState encoderOne = 1;
        optional SignalState encoderTwo = 2;
        optional SignalState encoderThree = 3;
    }
    message Result{}
}

message enableJointEvent {
    message In{
        required bool enable = 1;
    }
    message Result{}
}

message enableAccelerometerEvent {
    message In {
        required bool enable = 1;
        required float granularity = 2;
    }

    message Result{}
}

message setMotorControllerSafetyThreshold {
    message In {
        required uint32 mask = 1;
        repeated uint32 values = 2 [packed=true, (nanopb).max_count=32]; 
    }
    message Result {}
}

message setMotorControllerSafetyAngle {
    message In {
        required uint32 mask = 1;
        repeated float values = 2 [packed=true, (nanopb).max_count=32]; 
    }
    message Result {}
}

// used by smooth acceleration
message setMotorControllerAlphaI {
    message In {
        required uint32 mask = 1;
        repeated float values = 2 [packed=true, (nanopb).max_count=32]; 
    }
    message Result {}
}

// used by smooth acceleration
message setMotorControllerAlphaF {
    message In {
        required uint32 mask = 1;
        repeated float values = 2[packed=true, (nanopb).max_count=32]; 
    }
    message Result {}
}

// used by smooth acceleration, constant velocity
message setMotorControllerOmega {
    message In {
        required uint32 mask = 1;
        repeated float values = 2[packed=true, (nanopb).max_count=32]; 
    }
    message Result {}
}

// used by PID controller
message setMotorControllerProportionalGain {
    message In {
        required uint32 mask = 1;
        repeated float values = 2[packed=true, (nanopb).max_count=32]; 
    }
    message Result {}
}

// used by PID controller
message setMotorControllerIntegratorGain {
    message In {
        required uint32 mask = 1;
        repeated float values = 2[packed=true, (nanopb).max_count=32]; 
    }
    message Result {}
}

// used by PID controller
message setMotorControllerDerivativeGain {
    message In {
        required uint32 mask = 1;
        repeated float values = 2[packed=true, (nanopb).max_count=32]; // Derivative gain for PID 
    }
    message Result {
    }
}

message setResetOnDisconnect {
    message In {
        // Define by `mask |= (1 << barobo_Peripheral_MOTOR1)`, etc.
        required uint32 mask = 1;
        required uint32 peripheralResetMask = 2;
    }
    message Result {
    }
}

message getBatteryVoltage {
    message In {
    }
    message Result {
        required float v = 1;
    }
}

message getAdcRaw {
    message In {
    }
    message Result {
        repeated uint32 values = 1[packed=true, (nanopb).max_count=32];
    }
}

message getMotorControllerSafetyThreshold {
    message In {
    }
    message Result {
        repeated uint32 values = 1[packed=true, (nanopb).max_count=32]; // acceleration
    }
}

message getMotorControllerSafetyAngle{
    message In {
    }
    message Result {
        repeated float values = 1[packed=true, (nanopb).max_count=32]; // acceleration
    }
}

// used by smooth acceleration
message getMotorControllerAlphaI {
    message In {
    }
    message Result {
        repeated float values = 1[packed=true, (nanopb).max_count=32]; // acceleration
    }
}

// used by smooth acceleration
message getMotorControllerAlphaF {
    message In {
    }
    message Result {
        repeated float values = 1[packed=true, (nanopb).max_count=32]; // deceleration
    }
}

// used by smooth acceleration, constant velocity
message getMotorControllerOmega {
    message In {
    }
    message Result {
        repeated float values = 1[packed=true, (nanopb).max_count=32]; // deceleration
    }
}

// used by PID controller
message getMotorControllerProportionalGain {
    message In {
    }
    message Result {
        repeated float values = 1[packed=true, (nanopb).max_count=32]; // Proportional gain for PID controller
    }
}

// used by PID controller
message getMotorControllerIntegratorGain {
    message In {
    }
    message Result {
        repeated float values = 1[packed=true, (nanopb).max_count=32]; // Integrator gain for PID
    }
}

// used by PID controller
message getMotorControllerDerivativeGain {
    message In {
    }
    message Result {
        repeated float values = 1[packed=true, (nanopb).max_count=32]; // Derivative gain for PID 
    }
}

message getEncoderValues {
    message In {}
    message Result {
        required uint32 timestamp = 1;
        // realistically, the maximum number of encoder values we'll transmit
        // is 3, but to future-proof this, up the max_count to something
        // bigger.
        repeated float values = 2 [packed=true, (nanopb).max_count=32];
    }
}

enum JointState {
    COAST = 0;
    HOLD = 1;
    MOVING = 2;
    ERROR = 4;
}

message getJointStates {
    message In {}
    message Result{
        required uint32 timestamp = 1;
        // See getEncoderValues above
        repeated JointState values = 2 [packed=true, (nanopb).max_count=32];
    }
}

message getFormFactor {
    enum FormFactor {
        I = 0;
        L = 1;
        T = 2;
        DONGLE = 3;
    }
    message In {}
    message Result {
        required FormFactor value = 1;
    }
}

// For standard acceleration:
// Controller: ACCEL
// goal : initial velocity
// AlphaI : Acceleration of motor
// AlphaF : Ignored: Set to 0
// timeout (optional) : When to stop the motor
// Omega : VMax

// For smooth motion:
// Controller: SMOOTH
// ABS(Omega) : VMax
// AlphaI : Starting Acceleration
// AlphaF : Ending Acceleration

message Goal {
    enum Type {
        ABSOLUTE = 1; // move to an absolute angle value
        RELATIVE = 2; // move to an angle value relative to the current motor angle
        INFINITE = 3; // just move, using goal as a coefficient to speed
                      // i.e., use 1.0 to move forward, -1.0 to move backward
    }
    enum Controller {
        PID = 1;
        CONSTVEL = 2;
        SMOOTH = 3;
        ACCEL = 4;
        CYCLOIDAL = 5;
        HARMONIC = 6;
    }
    required Type type = 1;
    required float goal = 2; // absolute, relative angles; or coefficient in infinite case
    optional Controller controller = 3;
    optional float timeout = 4; // Seconds from now to time out
    optional JointState modeOnTimeout = 5;
}

// notes: make motor controller attributes per motor
//        error if move is called on constant velocity-no goal controlled
//        motor?
message move {
    message In {
        optional Goal motorOneGoal = 1;
        optional Goal motorTwoGoal = 2;
        optional Goal motorThreeGoal = 3;
    }
    message Result { }
}

message resetEncoderRevs {
    message In { }
    message Result { }
}

message stop {
    message In {optional uint32 mask = 1;}
    message Result {}
}

message getButtonState {
    message In {}
    message Result {
        // 000 = all buttons up
        // 001 = button POWER down
        // 010 = button A down
        // 100 = button B down
        required uint32 mask = 1;
    }
}

// deprecated
message getFirmwareVersion {
    message In {}
    message Result {
        required uint32 major = 1;
        required uint32 minor = 2;
        required uint32 patch = 3;
    }
}

message getFirmwareVersionString {
    message In {}
    message Result {
        required string value = 1 [(nanopb).max_size = 128];
    }
}

message writeEeprom {
    message In {
        required uint32 address = 1;
        required bytes data = 2 [(nanopb).max_size = 128];
    }
    message Result { }
}

message readEeprom {
    message In {
        required uint32 address = 1;
        required uint32 size = 2;
    }
    message Result {
        required bytes data = 1[ (nanopb).max_size = 128];
    }
}

message writeTwi {
    message In {
        required uint32 address = 1;
        required bytes data = 2 [(nanopb).max_size = 128];
    }
    
    message Result { }
}

message readTwi {
    message In { 
        required uint32 address = 1; 
        required uint32 recvsize = 2;
    } 
    message Result {
        required bytes data = 2 [(nanopb).max_size = 128];
    }
}

message writeReadTwi {
    message In {
        required uint32 address = 1;
        required uint32 recvsize = 2;
        required bytes data = 3 [(nanopb).max_size = 128];
    }
    message Result {
        required bytes data = 2 [(nanopb).max_size = 128];
    }
}

message reboot {
    message In {}
    message Result {}
}

//////////////////////////////////////////////////////////////////////////////
// Broadcasts

enum Button {
    POWER = 0;
    A = 1;
    B = 2;
}

enum ButtonState {
    UP = 0;
    DOWN = 1;
}

message buttonEvent {
    required uint32 timestamp = 1;
    required Button button = 2;
    required ButtonState state = 3;
}

message encoderEvent {
    required uint32 timestamp = 1;
    required uint32 encoder = 2;
    required float value = 3;
}

message accelerometerEvent {
    required uint32 timestamp = 1;
    required float x = 2;
    required float y = 3;
    required float z = 4;
}

message jointEvent {
    required uint32 timestamp = 1;
    required uint32 joint = 2;
    required JointState event = 3;
    optional float angle = 4;
}

message debugMessageEvent {
    required uint32 timestamp = 1;
    required string bytestring = 2 [(nanopb).max_size=128];
}

message connectionTerminated {
    required uint32 timestamp = 1;
}
