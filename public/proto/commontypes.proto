import "nanopb.proto";
import "rpc.proto";
package barobo;

message SerialId {
    required string value = 1 [(nanopb).max_size = 5];
}

message Payload {
    required bytes value = 1 [(nanopb).max_size = 128];
}

enum Status {
    OK = 0;
    CANNOT_OPEN_DONGLE = 1;
    DONGLE_NOT_FOUND = 2;
    PORT_OUT_OF_RANGE = 3;

    UNREGISTERED_SERIALID = 5;
    INVALID_SERIALID = 6;

    DAEMON_UNAVAILABLE = 7;

    STRANGE_DONGLE = 8;
    INCOMPATIBLE_FIRMWARE = 9;

    BUFFER_OVERFLOW = 10;
    OTHER_ERROR = 11;
}

enum RadioPort {
    ROBOT_SERVER = 0;
    ROBOT_CLIENT = 1;
    ROBOT_PING = 2;
    ROBOT_EVENT = 3;
    ROBOT_BUMPCONNECT = 4;
}

enum Peripheral {
    MOTOR1 = 0;
    MOTOR2 = 1;
    MOTOR3 = 2;
    LED = 3;
    BUZZER = 4;
}

// Radio broadcast from the daemon to multiple robots.
message RobotPing {
    repeated SerialId destinations = 1 [(nanopb).max_count = 8];
    // To access destinations:
    // for (auto i = 0; i < self.destinations_count; ++i) {
    //     // self.destinations[i] is a null-terminated char[5]
    // }

    optional uint32 peripheralResetMask = 2;
    // Define by `mask |= (1 << barobo_Peripheral_MOTOR1)`, etc.
}

// Radio broadcast from a robot to all daemons.
message RobotEvent {
    required barobo.rpc.VersionTriplet firmwareVersion = 2;
    required barobo.rpc.Versions rpcVersions = 3;
}

// Wraps all messages to or from a computer
message SessionMessage {
    optional uint32 computerId = 1;
    required Payload payload = 2;
}

enum BumpConnectMessageType {
    SYNC_SHOCK = 0; // Payload is BumpConnect_ArbitrateMaster
    SET_SLAVE = 1; // Payload is BumpConnect_GroupInfo
    SET_MASTER = 2; // Payload is BumpConnect_GroupInfo
    SET_POWER = 3;
    SET_POS = 4;
    NEW_SLAVE = 5; // No Payload
    UNPAIR = 6;
    RECORD_POSE = 7;
    GOTO_POSE = 8;
    POSE_REACHED = 9;
    PLAY_POSES = 10;
    CLEAR_POSES = 11;
    SET_LED_COLOR = 12;
}

message BumpConnectMessage {
    repeated SerialId destinations = 1 [(nanopb).max_count = 8];
    required BumpConnectMessageType type = 2;
    optional Payload payload = 3;
}

message BumpConnect_ArbitrateMaster {
    required uint32 millisSinceShock = 1;
    required uint32 millisSinceButton = 2;
}

message BumpConnect_SetMotorPower {
    required int32 m1 = 1;
    required int32 m2 = 2;
    required int32 m3 = 3;
}

message BumpConnect_SetJointPos {
    required float m1 = 1;
    required float m2 = 2;
    required float m3 = 3;
}

// This message used with the SET_SLAVE or SET_MASTER message type
message BumpConnect_GroupInfo{
    required uint32 groupId = 1;
    required uint32 rgb = 2;
    optional SerialId masterId = 3;
}

message BumpConnect_RecordPose {
    optional uint32 index = 1;
}

message BumpConnect_GoToPose {
    required uint32 index = 1;
}

message BumpConnect_LedColor {
    required uint32 color = 1;
}
